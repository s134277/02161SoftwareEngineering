package projectManager;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import java.util.List;
import org.junit.Test;


public class testCreateUser {
	@Test
	public void testCreateUserMichael123() throws Exception {
		MAIN sys = new MAIN();
		
		// B1 - ingen brugere i systemet
		List<User> users = sys.getUsers();
		assertEquals(0, users.size());

		//B2 - opretter bruger i systemet
		User user = new User("Michael", "123",37);
		sys.register(user);
		// Checker om brugeren er oprettet i systemet
		users = sys.getUsers();
		assertEquals(1, users.size());
		
		// testing get and set
		User registeredUser = users.get(0);
		assertEquals("Michael", registeredUser.getName());
		assertEquals("123", registeredUser.getPW());
	}
	
	@Test
	public void testUsernameTaken() throws Exception {
		MAIN sys = new MAIN();

		//step 1 
		User user1 = new User("Michael","123",37);
		sys.register(user1);
		
		//step 2
		User user2 = new User("Michael","123",37);

		//C1
		try {
			sys.register(user2);
			fail("An UserAlreadyExistsException should have been thrown");
		} catch (UserAlreadyExistsException e) {
			
			// Step 3
			assertEquals("Register user operation not allowed if username already taken.", e
					.getMessage());
			assertEquals(1, sys.getUsers().size());
		}
	}
	
	@Test
	public void testNoPasswordEntered() throws Exception {
		MAIN sys = new MAIN();
		
		User user = new User("Jonas","",37);

		try {
			sys.register(user);
			fail("An NoPasswordEnteredException should have been thrown");
		} catch (NoPasswordEnteredException e) {
			
			// Step 3
			assertEquals("Register user operation not allowed if no password entered.", e
					.getMessage());
		}
	}
	@Test
	public void testEditUser() throws Exception {
		MAIN sys = new MAIN();
		// Step 2) opretter bruger i systemet
		User user = new User("Michael", "123",37);
		sys.register(user);
		
		//new user values
		String newName = "Michaela";
		String newPW = "321";
		double newWWH = 40;
		
		//setting new values
		user.setName(newName);
		user.setPW(newPW);
		user.setWeeklyWorkHours(newWWH);
		
		//checking new values
		assertEquals(newName,user.getName());
		assertEquals(newPW,user.getPW());
		assertEquals(newWWH,user.getWeeklyWorkHours(),1e17);
		
		//test delete user
		sys.deleteGlobalUser(user);
		
		assertEquals(0,sys.getUsers().size());
		
	}
	
}
