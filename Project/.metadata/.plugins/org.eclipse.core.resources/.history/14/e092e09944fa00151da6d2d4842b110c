import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.List;

import org.junit.Test;

/**
 * This class contains tests, testing the functionality of adding books to the library.
 * @author hub
 *
 */

public class TestLogin {



	/** 
	 * Tests the scenario when the administrator successfully logs in.
	 * <ol>
	 *  <li> The administrator logs in with the correct password
	 * 	<li> The library application knows that the administrator is logged in
	 * </ol>
	 */
	@Test
	public void testLogin() throws Exception{
		// opretter bruger
		System sys = new System();
		User user = sys.newUser("Michael","123");
		
		//logger ind med bruger
		Boolean loggedIn = sys.login("Michael","123");
		assertTrue(loggedIn);
		
		// logger ud
		loggedIn = sys.logOut();
		assertFalse(loggedIn);
		
		//wrong password
		try{
			// do something
			fail("WrongCredentialsException exception should have been thrown");
		} catch (WrongCredentialsException e) {
			// Check that the exception thrown has the correct error message and knows which operation failed.
			assertEquals("Remove a user operation not allowed if not admin.",e.getMessage());
			assertEquals("Remove user",e.getOperation());
		}
		
		public void TestRemoveUserAdminNotLoggedIn() {
			// opretter cpr og finder ham i systemet
			String cprNumber = "1234651234";
			User user = libApp.userByCprNumber(cprNumber);
			
			//checking admin is not logged in
			libApp.adminlogoff();
			assertFalse(libApp.adminLoggedIn());
			
			try {
				libApp.removeUser(user);
				
				fail("OperationNotAllowedException exception should have been thrown");
			
			
			// Check that the user has not been removed
			assertEquals(cprNumber,user.getCprNumber());
		}
		
		
	}
}
